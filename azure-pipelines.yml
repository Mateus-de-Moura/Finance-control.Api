trigger:
- main

pool:
  name: default

variables:
  buildConfiguration: 'Release'
  projectPath: 'src/finance-control.Api/finance-control.Api.csproj'
  outputFolder: '$(Build.ArtifactStagingDirectory)/publish'
  publishDestination: 'C:\Users\Mateus\Desktop\Publish'

steps:
- task: UseDotNet@2
  displayName: 'Instalar .NET 9 SDK'
  inputs:
    packageType: 'sdk'
    version: '9.0.x'
    installationPath: $(Agent.ToolsDirectory)/dotnet

- task: DotNetCoreCLI@2
  displayName: 'Restaurar pacotes'
  inputs:
    command: 'restore'
    projects: '$(projectPath)'

- task: DotNetCoreCLI@2
  displayName: 'Build API (.NET 9)'
  inputs:
    command: 'build'
    projects: '$(projectPath)'
    arguments: '--configuration $(buildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: 'Publicar API (.NET 9)'
  inputs:
    command: 'publish'
    publishWebProjects: false
    projects: '$(projectPath)'
    arguments: '--configuration $(buildConfiguration) --output $(outputFolder) --no-self-contained'
    zipAfterPublish: false

- powershell: |
    $source = "$(outputFolder)"
    $destination = "$(publishDestination)"

    Write-Host "Limpando destino: $destination"
    # Sua lógica de limpeza está boa, pode manter.
    Get-ChildItem -Path $destination -Recurse | Where-Object {
        $_.FullName -notlike "*aspnet_client*"
    } | Remove-Item -Recurse -Force -ErrorAction SilentlyContinue

    Write-Host "Copiando arquivos de $source para $destination"
    # O comando Copy-Item com -Recurse já deve fazer o trabalho se o destino existir.
    # Vamos garantir que ele copie tudo de dentro da origem para o destino.
    Copy-Item -Path "$source\." -Destination $destination -Recurse -Force

    Write-Host "Publicação concluída com sucesso."
  displayName: 'Copiar build para IIS'